#!/usr/bin/env node

/**
 * AWS Amplify Environment Variable Generator
 *
 * This script helps generate and validate environment variable configurations
 * for AWS Amplify deployment.
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ AWS Amplify Environment Variable Generator');
console.log('==============================================\n');

// Load environment variables from .env.example
const envExamplePath = path.join(process.cwd(), '.env.example');
const envVars = new Map();

if (fs.existsSync(envExamplePath)) {
  console.log('‚úÖ Loading variables from .env.example...');

  const envContent = fs.readFileSync(envExamplePath, 'utf8');
  const lines = envContent.split('\n');

  lines.forEach(line => {
    const trimmed = line.trim();
    if (trimmed && !trimmed.startsWith('#')) {
      const [key, value] = trimmed.split('=');
      if (key && value) {
        envVars.set(key.trim(), value.trim());
      }
    }
  });

  console.log(`   Loaded ${envVars.size} variables\n`);
} else {
  console.log('‚ö†Ô∏è  .env.example not found, using defaults\n');
}

// Set production defaults
console.log('üìù Configuring production defaults...');
envVars.set('NODE_ENV', 'production');
envVars.set('NEXT_TELEMETRY_DISABLED', '1');
envVars.set('NODE_OPTIONS', '--max-old-space-size=4096');
envVars.set('ANALYZE', 'false');
envVars.set('NEXT_PUBLIC_ENABLE_ANALYTICS', 'true');
envVars.set('NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING', 'true');
envVars.set('GENERATE_SITEMAP', 'true');
envVars.set('CONTENT_VALIDATION_STRICT', 'true');

// Update site URL to use Amplify dynamic URL
envVars.set('NEXT_PUBLIC_SITE_URL', '$AMPLIFY_APP_URL');

console.log('   Production defaults configured\n');

// Validate required variables
console.log('üîç Validating environment configuration...');
const requiredVars = [
  'NEXT_PUBLIC_SITE_URL',
  'NEXT_PUBLIC_SITE_NAME',
  'CONTACT_EMAIL',
  'NODE_ENV',
  'NEXT_TELEMETRY_DISABLED',
];

const missing = [];
const warnings = [];

requiredVars.forEach(varName => {
  if (!envVars.has(varName) || !envVars.get(varName)) {
    missing.push(varName);
  }
});

// Check for placeholder values
envVars.forEach((value, key) => {
  if (
    value.includes('your-domain.com') ||
    value.includes('XXXXXXXXXX') ||
    value.includes('yourcompany') ||
    value.includes('yourpage') ||
    value.includes('yourhandle')
  ) {
    warnings.push(`${key} contains placeholder value: ${value}`);
  }
});

if (missing.length > 0) {
  console.log('   ‚ùå Missing required variables:');
  missing.forEach(varName => console.log(`      - ${varName}`));
}

if (warnings.length > 0) {
  console.log('   ‚ö†Ô∏è  Variables with placeholder values:');
  warnings.forEach(warning => console.log(`      - ${warning}`));
}

if (missing.length === 0 && warnings.length === 0) {
  console.log('   ‚úÖ All environment variables are properly configured');
}

console.log('');

// Generate Amplify Console configuration
console.log('üìã AWS Amplify Console Configuration:');
console.log('=====================================\n');

console.log('Copy and paste these variables into your AWS Amplify Console:\n');

// Group variables by category
const categories = {
  'Core Configuration': [
    'NEXT_PUBLIC_SITE_URL',
    'NEXT_PUBLIC_SITE_NAME',
    'NEXT_PUBLIC_SITE_DESCRIPTION',
    'CONTACT_EMAIL',
    'NODE_ENV',
    'NEXT_TELEMETRY_DISABLED',
    'NODE_OPTIONS',
  ],
  'Analytics & Tracking': [
    'NEXT_PUBLIC_GA_ID',
    'NEXT_PUBLIC_GTM_ID',
    'NEXT_PUBLIC_FACEBOOK_PIXEL_ID',
    'NEXT_PUBLIC_HOTJAR_ID',
  ],
  'Social Media': [
    'NEXT_PUBLIC_FACEBOOK_URL',
    'NEXT_PUBLIC_TWITTER_URL',
    'NEXT_PUBLIC_LINKEDIN_URL',
    'NEXT_PUBLIC_INSTAGRAM_URL',
  ],
  'Email Configuration': [
    'SMTP_HOST',
    'SMTP_PORT',
    'SMTP_USER',
    'SMTP_PASS',
    'SMTP_SECURE',
  ],
  'Performance & Optimization': [
    'NEXT_PUBLIC_ENABLE_ANALYTICS',
    'NEXT_PUBLIC_ENABLE_PERFORMANCE_MONITORING',
    'ANALYZE',
    'GENERATE_SITEMAP',
    'CONTENT_VALIDATION_STRICT',
  ],
};

Object.entries(categories).forEach(([category, vars]) => {
  const categoryVars = vars.filter(varName => envVars.has(varName));

  if (categoryVars.length > 0) {
    console.log(`# ${category}`);
    categoryVars.forEach(varName => {
      const value = envVars.get(varName);
      console.log(`${varName}=${value}`);
    });
    console.log('');
  }
});

// Save configuration to file
const outputPath = path.join(process.cwd(), '.env.amplify');
let content = '# AWS Amplify Environment Variables\n';
content += '# Generated by amplify-env-generator.js\n';
content += `# Generated on: ${new Date().toISOString()}\n\n`;

envVars.forEach((value, key) => {
  content += `${key}=${value}\n`;
});

fs.writeFileSync(outputPath, content);
console.log(`üíæ Configuration saved to: ${outputPath}\n`);

// Generate setup instructions
console.log('üìñ Setup Instructions:');
console.log('======================\n');

console.log('1. Copy the environment variables above');
console.log('2. Go to AWS Amplify Console');
console.log('3. Select your application');
console.log('4. Click "Environment variables" in the sidebar');
console.log('5. Click "Manage variables"');
console.log('6. Add each variable using the key-value pairs above');
console.log('7. Save the configuration');
console.log('8. Trigger a new deployment to apply changes\n');

console.log('Important Notes:');
console.log(
  '- NEXT_PUBLIC_SITE_URL will be automatically set to $AMPLIFY_APP_URL'
);
console.log('- Replace placeholder values with your actual information');
console.log('- Test the deployment after configuration');
console.log('- Monitor build logs for validation messages\n');

if (missing.length > 0 || warnings.length > 0) {
  console.log(
    '‚ö†Ô∏è  Please review and update the configuration before deploying to production.'
  );
} else {
  console.log(
    '‚úÖ Environment configuration is ready for AWS Amplify deployment!'
  );
}
