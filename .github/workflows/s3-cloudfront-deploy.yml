name: S3 CloudFront Deployment
on:
  workflow_dispatch:
    inputs:
      invalidate:
        type: choice
        options: ["true","false"]
        default: "true"
        required: true

concurrency:
  group: deploy-${{ github.ref_name }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  S3_BUCKET: mobile-marketing-site-prod-1759705011281-tyzuo9
  CF_DISTRIBUTION_ID: E2IBMHQ3GCW6ZK
  NODE_VERSION: "22.19.0"
  HTML_CACHE: "public, max-age=600"
  ASSET_CACHE: "public, max-age=31536000, immutable"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.19.0
          cache: npm
      - name: Install
        run: npm ci
      - name: Brand / gradient guard
        run: |
          if grep -RInE "from-|via-|bg-gradient-|indigo-|purple-|yellow-" src apps; then
            echo "::error::Prohibited gradient/color classes found"; exit 1; fi
      - name: Build (Next export â†’ /out)
        run: npm run build && npm run export
      - name: Patch sitemap to include Privacy Policy if missing
        run: |
          PRIV="https://d15sc9fc739ev2.cloudfront.net/privacy-policy/"
          test -f out/sitemap.xml || exit 0
          grep -q "$PRIV" out/sitemap.xml || \
          awk -v u="$PRIV" '/<\/urlset>/{print "  <url><loc>"u"</loc></url>"}1' out/sitemap.xml > t && mv t out/sitemap.xml
      - uses: actions/upload-artifact@v4
        with:
          name: site-out
          path: out
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: site-out
          path: out

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Init Audit Log
        run: node scripts/deployment-audit-logger.js init

      - name: Security Validation
        run: node scripts/validate-aws-security-configuration.js

      - name: Sync HTML (short TTL)
        run: |
          aws s3 sync out s3://$S3_BUCKET \
            --exclude "*" --include "*.html" --include "sitemap.xml" --include "robots.txt" \
            --cache-control "$HTML_CACHE" --delete

      - name: Sync assets (immutable)
        run: |
          aws s3 sync out s3://$S3_BUCKET \
            --exclude "*.html" --exclude "sitemap.xml" --exclude "robots.txt" \
            --cache-control "$ASSET_CACHE" --delete

      - name: MIME fixes
        run: |
          [ -f out/sitemap.xml ] && aws s3 cp out/sitemap.xml s3://$S3_BUCKET/sitemap.xml --cache-control "$HTML_CACHE" --content-type "application/xml"
          [ -f out/site.webmanifest ] && aws s3 cp out/site.webmanifest s3://$S3_BUCKET/site.webmanifest --cache-control "$ASSET_CACHE" --content-type "application/manifest+json"
          [ -f out/robots.txt ] && aws s3 cp out/robots.txt s3://$S3_BUCKET/robots.txt --cache-control "$HTML_CACHE" --content-type "text/plain"

      - name: Invalidate CloudFront
        if: ${{ github.event.inputs.invalidate == 'true' }}
        run: |
          aws cloudfront create-invalidation --distribution-id "$CF_DISTRIBUTION_ID" \
            --paths "/" "/index.html" "/services/*" "/blog*" "/images/*" "/_next/*" "/sitemap.xml"

      - name: Finalize Audit + Dashboard
        run: |
          node scripts/deployment-audit-logger.js complete
          node scripts/deployment-status-dashboard.js generate
          node scripts/deployment-monitoring-integration.js report
