# GitHub Actions workflow for S3 + CloudFront deployment
# This workflow deploys the Next.js static export to S3 and invalidates CloudFront cache

name: S3 CloudFront Deployment

on:
  push:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "*.md"
      - ".gitignore"
      - ".editorconfig"
      - ".prettierignore"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options: [production, staging]

env:
  NODE_VERSION: "20.19.0"   # vite@7 requires ^20.19 or >=22.12
  AWS_REGION: "us-east-1"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Show Node & npm versions
        run: |
          node -v
          npm -v

      - name: Install dependencies
        run: npm ci

      - name: Validate environment configuration
        run: npm run env:validate
        env:
          NODE_ENV: production
          NEXT_PUBLIC_SITE_NAME: ${{ github.event.inputs.environment == 'staging' && 'Staging Site' || 'Production Site' }}

      - name: Validate content structure
        run: npm run content:validate-structure

      - name: Validate content
        run: npm run content:validate

      - name: Run linting
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Run tests
        run: npm run test --run

      - name: Build Next.js static export
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SITE_NAME: ${{ github.event.inputs.environment == 'staging' && 'Staging Site' || 'Production Site' }}

      - name: Verify build image integrity
        run: npm run build:verify

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-S3CloudFrontDeploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 and invalidate CloudFront
        run: node scripts/deploy.js
        env:
          DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Run comprehensive post-deployment validation
        run: node scripts/deployment-validator.js
        env:
          SITE_URL: ${{ secrets.SITE_URL }}
          DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: ${{ secrets.SITE_URL }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()

    steps:
      - name: Notify deployment success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful to ${{ github.event.inputs.environment || 'production' }}"
          echo "Site URL: ${{ secrets.SITE_URL }}"

      - name: Notify deployment failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed to ${{ github.event.inputs.environment || 'production' }}"
          echo "Check the workflow logs for details"
          exit 1
